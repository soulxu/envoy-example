# the original downstream sni value will be missing in upstream sni.you only can manually set sni value in upstream tls config.

admin:
  access_log_path: /tmp/admin_access.log
  address:
    socket_address:
      protocol: TCP
      address: 127.0.0.1
      port_value: 9901
static_resources:
  secrets:
    - name: "testcert"
      validation_context:
        trusted_ca:
          filename: "/home/hejiexu/envoy-example/cert/root/intermedia/cluster/cluster.pem"
  listeners:
  - name: my_listener
    address:
      socket_address:
        protocol: TCP
        address: 0.0.0.0
        port_value: 13333
    listener_filters:
    - name: envoy.filters.listener.tls_inspector
      typed_config: {}
    filter_chains:
    - filters:
      - name: envoy.filters.network.tcp_proxy
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.filters.network.tcp_proxy.v3.TcpProxy
          stat_prefix: ingress_tcp
          cluster: foo.example.com
      transport_socket:
        name: "downstream_transport_socket"
        typed_config:
          "@type": type.googleapis.com/envoy.extensions.transport_sockets.tls.v3.DownstreamTlsContext
          common_tls_context:
            tls_certificates:
              - private_key:
                  filename: "/home/hejiexu/envoy-example/cert/root/cert/server-key.pem"
                certificate_chain:
                  filename: "/home/hejiexu/envoy-example/cert/root/cert/server.pem"
            validation_context:
              trusted_ca:
                filename: "/home/hejiexu/envoy-example/cert/root/ca.pem"
  clusters:
  - name: foo.example.com
    connect_timeout: 0.25s
    type: strict_dns
    lb_policy: round_robin
    protocol_selection: USE_DOWNSTREAM_PROTOCOL
    load_assignment:
      cluster_name: foo.example.com
      endpoints:
      - lb_endpoints:
        - endpoint:
            address:
              socket_address:
                address: 0.0.0.0
                port_value: 33333

